name: Node.js CI & CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test_and_build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x] # Specify a Node.js version

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        # Ensure cache-dependency-path targets all package-lock.json files if multiple exist
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: Install Frontend Dependencies
      run: cd frontend && npm ci

    - name: Run Frontend Tests (Placeholder)
      run: cd frontend && npm run test --if-present # Assuming you have a test script

    - name: Build Frontend
      run: cd frontend && npm run build
      env:
        NEXT_PUBLIC_DISABLE_ESLINT: true # Disable ESLint during build if causing issues in CI

    - name: Install Backend Dependencies
      # If package-lock.json is committed, npm ci is preferred. 
      # If not, npm install will create it and install dependencies.
      run: |
        cd backend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Run Backend Tests (Placeholder)
      run: cd backend && npm test --if-present

  # Placeholder for Vercel Deployment (Frontend)
  deploy_frontend_vercel:
    needs: test_and_build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20 # Or official Vercel action if preferred
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}  #Required
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }} #Required
          vercel-scope: ${{ secrets.VERCEL_ORG_ID }} # Scope can be team or org ID
          working-directory: ./frontend
          # vercel-args: '--prod' # Deploy to production

  # Placeholder for Railway Deployment (Backend)
  # deploy_backend_railway:
  #   needs: test_and_build
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Deploy to Railway
  #       uses: railwayapp/cli-action@v1 # Or another Railway deployment action
  #       with:
  #         railway-token: ${{ secrets.RAILWAY_TOKEN }}
  #         # railway-project-id: ${{ secrets.RAILWAY_PROJECT_ID }} # Or service name
  #         # service-name: 'backend' # If your Railway project has multiple services
  #         # working-directory: ./backend # Ensure this points to your backend code
  #       env:
  #         RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }} 